'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { KerberosData } from '@/types/kerberos';
import { OrganizationApiService, Organization } from '@/services/api/organizationApi';
import { AgentApiService, AgentDetails } from '@/services/api/agentApi';
import { ScanApiService } from '@/services/api/scanApi';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

export default function KerberosPage() {
  const [organizations, setOrganizations] = useState<Organization[]>([]);
  const [selectedOrg, setSelectedOrg] = useState('');
  const [agents, setAgents] = useState<AgentDetails[]>([]);
  const [selectedAgent, setSelectedAgent] = useState('');
  const [scanData, setScanData] = useState<KerberosData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch organizations
  useEffect(() => {
    const fetchOrganizations = async () => {
      try {
        const organizations = await OrganizationApiService.getAllOrganizations();
        setOrganizations(organizations);
      } catch (err) {
        setError('Failed to fetch organizations');
      }
    };
    fetchOrganizations();
  }, []);

  // Fetch agents when organization is selected
  useEffect(() => {
    const fetchAgents = async () => {
      if (!selectedOrg) {
        setAgents([]);
        setSelectedAgent('');
        return;
      }

      try {
        const selectedOrganization = organizations.find(org => org._id === selectedOrg);
        if (!selectedOrganization) return;

        const agentPromises = selectedOrganization.agentIds.map(agentId =>
          AgentApiService.getAgentDetails(agentId)
        );

        const agentDetails = await Promise.all(agentPromises);
        setAgents(agentDetails);
        setSelectedAgent('');
      } catch (err) {
        setError('Failed to fetch agents');
        setAgents([]);
      }
    };

    fetchAgents();
  }, [selectedOrg, organizations]);

  // Fetch scan data when agent is selected
  useEffect(() => {
    const fetchScanData = async () => {
      if (!selectedAgent) {
        setScanData(null);
        return;
      }

      try {
        setLoading(true);
        const result = await ScanApiService.getLatestScanResult(selectedAgent);
        if (result?.scanResult) {
          const parsedScanResult = JSON.parse(result.scanResult);
          const kerberosData = parsedScanResult.kerberos;
          if (kerberosData) {
            setScanData(kerberosData);
          } else {
            setScanData(null);
          }
        } else {
          setScanData(null);
        }
      } catch (err) {
        console.error('Error parsing scan data:', err);
        setError('Failed to fetch scan data');
        setScanData(null);
      } finally {
        setLoading(false);
      }
    };

    fetchScanData();
  }, [selectedAgent]);

  const handleOrgChange = (orgId: string) => {
    setSelectedOrg(orgId);
    setSelectedAgent('');
    setScanData(null);
  };

  const handleAgentChange = (agentId: string) => {
    setSelectedAgent(agentId);
    setScanData(null);
  };

  return (
    <div className="space-y-6">
      <Card className="bg-[#111] border-gray-800 shadow-lg">
        <CardHeader className="space-y-4">
          <div className="text-gray-400 text-center text-sm">[ Vulnerability Assessment ]</div>
          <CardTitle className="text-2xl md:text-3xl font-bold text-center text-white">
            Kerberos Security Analysis
          </CardTitle>

          {/* Organization and Agent Selection */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Organization</label>
              <Select value={selectedOrg} onValueChange={handleOrgChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800">
                  <SelectValue placeholder="Select organization" />
                </SelectTrigger>
                <SelectContent>
                  {organizations.map((org) => (
                    <SelectItem key={org._id} value={org._id}>
                      {org.organizationName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Agent</label>
              <Select value={selectedAgent} onValueChange={handleAgentChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800" disabled={!selectedOrg}>
                  <SelectValue placeholder="Select agent" />
                </SelectTrigger>
                <SelectContent>
                  {agents.map((agent) => (
                    <SelectItem key={agent.agent_id} value={agent.agent_id}>
                      {agent.agent_name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>
        </CardHeader>

        {loading ? (
          <CardContent>
            <div className="text-center text-gray-400">Loading...</div>
          </CardContent>
        ) : scanData ? (
          <CardContent>
            <div className="space-y-6">
              {/* Kerberoastable Users Section */}
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white">Kerberoastable Users</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {scanData.kerberoastable_users.map((user) => (
                    <Card key={user.dn} className="bg-[#222] border-gray-700">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Username:</div>
                          <div className="text-white">{user.sAMAccountName}</div>
                          <div className="text-gray-400">Service Principals:</div>
                          <div className="text-white">
                            {user.servicePrincipalName?.map((spn) => (
                              <div key={spn}>{spn}</div>
                            ))}
                          </div>
                          <div className="text-gray-400">Description:</div>
                          <div className="text-white">{user.description}</div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </CardContent>
              </Card>

              {/* AS-REP Roastable Users Section */}
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white">AS-REP Roastable Users</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {scanData.asreproast_users.map((user) => (
                    <Card key={user.dn} className="bg-[#222] border-gray-700">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Username:</div>
                          <div className="text-white">{user.sAMAccountName}</div>
                          <div className="text-gray-400">UAC:</div>
                          <div className="text-white">{user.userAccountControl}</div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </CardContent>
              </Card>

              {/* Delegation Sections */}
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white">Delegation Configuration</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {/* Unconstrained Delegation */}
                  <div>
                    <h3 className="text-white font-medium mb-2">Unconstrained Delegation</h3>
                    {scanData.unconstrained_delegation.map((computer) => (
                      <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                        <CardContent className="pt-4 space-y-2">
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div className="text-gray-400">Computer Name:</div>
                            <div className="text-white">{computer.sAMAccountName}</div>
                            <div className="text-gray-400">DNS Name:</div>
                            <div className="text-white">{computer.dNSHostName}</div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>

                  {/* Constrained Delegation */}
                  <div>
                    <h3 className="text-white font-medium mb-2">Constrained Delegation</h3>
                    {scanData.constrained_delegation.map((computer) => (
                      <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                        <CardContent className="pt-4 space-y-2">
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div className="text-gray-400">Account Name:</div>
                            <div className="text-white">{computer.sAMAccountName}</div>
                            <div className="text-gray-400">Allowed Services:</div>
                            <div className="text-white">
                              {computer['msDS-AllowedToDelegateTo']?.map((service) => (
                                <div key={service}>{service}</div>
                              ))}
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>

                  {/* Resource-Based Constrained Delegation */}
                  <div>
                    <h3 className="text-white font-medium mb-2">Resource-Based Constrained Delegation</h3>
                    {scanData.resource_based_constrained_delegation.map((computer) => (
                      <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                        <CardContent className="pt-4 space-y-2">
                          <div className="grid grid-cols-2 gap-2 text-sm">
                            <div className="text-gray-400">Computer Name:</div>
                            <div className="text-white">{computer.sAMAccountName}</div>
                            <div className="text-gray-400">DNS Name:</div>
                            <div className="text-white">{computer.dNSHostName}</div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>

              {/* Domain Encryption Section */}
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white">Domain Encryption Settings</CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  {scanData.domain_encryption.map((encryption) => (
                    <Card key={encryption.distinguishedName} className="bg-[#222] border-gray-700">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Encryption Types:</div>
                          <div className="text-white">{encryption['msDS-SupportedEncryptionTypes']}</div>
                          <div className="text-gray-400">Distinguished Name:</div>
                          <div className="text-white">{encryption.distinguishedName}</div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </CardContent>
              </Card>
            </div>
          </CardContent>
        ) : (
          <CardContent>
            <div className="text-center text-gray-400">
              {selectedAgent ? 'No scan data available' : 'Select an organization and agent to view scan results'}
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}