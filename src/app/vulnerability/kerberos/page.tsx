'use client';

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { KerberosData } from '@/types/kerberos';

const mockData: KerberosData = {
  kerberoastable_users: [
    {
      sAMAccountName: "sqlservice",
      servicePrincipalName: [
        "MSSQLSvc/dbserver.adlab.local:1433",
        "MSSQLSvc/dbserver:1433"
      ],
      pwdLastSet: "133495826940000000",
      lastLogon: "133495827100000000",
      memberOf: [
        "CN=Domain Users,CN=Users,DC=adlab,DC=local"
      ],
      description: "SQL Server Service Account",
      dn: "CN=SQL Service,CN=Users,DC=adlab,DC=local"
    }
  ],
  asreproast_users: [
    {
      sAMAccountName: "vulnuser",
      userAccountControl: "4194304",
      pwdLastSet: "133495826940000000",
      lastLogon: "133495827100000000",
      dn: "CN=Vulnerable User,CN=Users,DC=adlab,DC=local"
    }
  ],
  domain_encryption: [
    {
      'msDS-SupportedEncryptionTypes': "31",
      distinguishedName: "DC=adlab,DC=local"
    }
  ],
  unconstrained_delegation: [
    {
      sAMAccountName: "DC01$",
      userAccountControl: "532480",
      servicePrincipalName: [
        "TERMSRV/DC01",
        "WSMAN/DC01",
        "RestrictedKrbHost/DC01",
        "HOST/DC01/ADLAB",
        "HOST/DC01"
      ],
      dNSHostName: "DC01.adlab.local",
      objectClass: "computer",
      dn: "CN=DC01,OU=Domain Controllers,DC=adlab,DC=local"
    }
  ],
  constrained_delegation: [
    {
      sAMAccountName: "webservice",
      'msDS-AllowedToDelegateTo': [
        "HTTP/webserver.adlab.local",
        "CIFS/fileserver.adlab.local"
      ],
      userAccountControl: "66048",
      objectClass: "user",
      dn: "CN=Web Service,CN=Users,DC=adlab,DC=local"
    }
  ],
  resource_based_constrained_delegation: [
    {
      sAMAccountName: "fileserver$",
      dNSHostName: "fileserver.adlab.local",
      'msDS-AllowedToActOnBehalfOfOtherIdentity': "binary_sid_data",
      objectClass: "computer",
      dn: "CN=FILESERVER,CN=Computers,DC=adlab,DC=local"
    }
  ]
};

export default function KerberosPage() {
  return (
    <div className="space-y-6">
      <Card className="bg-[#111] border-gray-800 shadow-lg">
        <CardHeader className="space-y-4">
          <div className="text-gray-400 text-center text-sm">[ Vulnerability Assessment ]</div>
          <CardTitle className="text-2xl md:text-3xl font-bold text-center text-white">
            Kerberos Security Analysis
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-6">
            {/* Kerberoastable Users Section */}
            <Card className="bg-[#1A1A1A] border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl text-white">Kerberoastable Users</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {mockData.kerberoastable_users.map((user) => (
                  <Card key={user.dn} className="bg-[#222] border-gray-700">
                    <CardContent className="pt-4 space-y-2">
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div className="text-gray-400">Username:</div>
                        <div className="text-white">{user.sAMAccountName}</div>
                        <div className="text-gray-400">Service Principals:</div>
                        <div className="text-white">
                          {user.servicePrincipalName?.map((spn) => (
                            <div key={spn}>{spn}</div>
                          ))}
                        </div>
                        <div className="text-gray-400">Description:</div>
                        <div className="text-white">{user.description}</div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </CardContent>
            </Card>

            {/* AS-REP Roastable Users Section */}
            <Card className="bg-[#1A1A1A] border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl text-white">AS-REP Roastable Users</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {mockData.asreproast_users.map((user) => (
                  <Card key={user.dn} className="bg-[#222] border-gray-700">
                    <CardContent className="pt-4 space-y-2">
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div className="text-gray-400">Username:</div>
                        <div className="text-white">{user.sAMAccountName}</div>
                        <div className="text-gray-400">UAC:</div>
                        <div className="text-white">{user.userAccountControl}</div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </CardContent>
            </Card>

            {/* Delegation Sections */}
            <Card className="bg-[#1A1A1A] border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl text-white">Delegation Configuration</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Unconstrained Delegation */}
                <div>
                  <h3 className="text-white font-medium mb-2">Unconstrained Delegation</h3>
                  {mockData.unconstrained_delegation.map((computer) => (
                    <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Computer Name:</div>
                          <div className="text-white">{computer.sAMAccountName}</div>
                          <div className="text-gray-400">DNS Name:</div>
                          <div className="text-white">{computer.dNSHostName}</div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                {/* Constrained Delegation */}
                <div>
                  <h3 className="text-white font-medium mb-2">Constrained Delegation</h3>
                  {mockData.constrained_delegation.map((computer) => (
                    <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Account Name:</div>
                          <div className="text-white">{computer.sAMAccountName}</div>
                          <div className="text-gray-400">Allowed Services:</div>
                          <div className="text-white">
                            {computer['msDS-AllowedToDelegateTo']?.map((service) => (
                              <div key={service}>{service}</div>
                            ))}
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>

                {/* Resource-Based Constrained Delegation */}
                <div>
                  <h3 className="text-white font-medium mb-2">Resource-Based Constrained Delegation</h3>
                  {mockData.resource_based_constrained_delegation.map((computer) => (
                    <Card key={computer.dn} className="bg-[#222] border-gray-700 mb-2">
                      <CardContent className="pt-4 space-y-2">
                        <div className="grid grid-cols-2 gap-2 text-sm">
                          <div className="text-gray-400">Computer Name:</div>
                          <div className="text-white">{computer.sAMAccountName}</div>
                          <div className="text-gray-400">DNS Name:</div>
                          <div className="text-white">{computer.dNSHostName}</div>
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* Domain Encryption Section */}
            <Card className="bg-[#1A1A1A] border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl text-white">Domain Encryption Settings</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {mockData.domain_encryption.map((encryption) => (
                  <Card key={encryption.distinguishedName} className="bg-[#222] border-gray-700">
                    <CardContent className="pt-4 space-y-2">
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div className="text-gray-400">Encryption Types:</div>
                        <div className="text-white">{encryption['msDS-SupportedEncryptionTypes']}</div>
                        <div className="text-gray-400">Distinguished Name:</div>
                        <div className="text-white">{encryption.distinguishedName}</div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </CardContent>
            </Card>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}