'use client';

import { useState, useEffect, useCallback } from 'react';
import ReactFlow, { Node, Edge, Controls, Background } from 'reactflow';
import 'reactflow/dist/style.css';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { OrganizationApiService, Organization } from '@/services/api/organizationApi';
import { AgentApiService, AgentDetails } from '@/services/api/agentApi';
import { ScanApiService } from '@/services/api/scanApi';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import * as d3 from 'd3-force';

interface GroupData {
  description: string[];
  member: string[];
  whenCreated: string;
  whenChanged: string;
  sAMAccountName: string;
  displayName: string[];
  memberOf: string[];
  dn: string;
}

interface ScanData {
  timestamp: string;
  queries_executed: number;
  results: {
    get_all_groups: GroupData[];
  };
}

const applyPhysicsLayout = (nodes: Node[], edges: Edge[]) => {
  const simNodes = nodes.map((n) => ({ ...n }));
  const simEdges = edges.map((e) => ({ source: e.source, target: e.target }));

  const simulation = d3.forceSimulation(simNodes as any)
    .force('charge', d3.forceManyBody().strength(-300))
    .force('center', d3.forceCenter(300, 300))
    .force('link', d3.forceLink(simEdges).id((d: any) => d.id).distance(100))
    .force('collide', d3.forceCollide(50))
    .stop();

  for (let i = 0; i < 300; i++) simulation.tick();

  const updatedNodes = simNodes.map((node: any) => {
    return {
      ...node,
      position: { x: node.x || 0, y: node.y || 0 },
      
      draggable: true,
      dragging: false
    };
  });

  return { nodes: updatedNodes, edges };
};

export default function GroupsPage() {
  const [organizations, setOrganizations] = useState<Organization[]>([]);
  const [selectedOrg, setSelectedOrg] = useState('');
  const [agents, setAgents] = useState<AgentDetails[]>([]);
  const [selectedAgent, setSelectedAgent] = useState('');
  const [scanData, setScanData] = useState<ScanData | null>(null);
  const [nodes, setNodes] = useState<Node[]>([]);
  const [edges, setEdges] = useState<Edge[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const handleOrgChange = (orgId: string) => {
    setSelectedOrg(orgId);
    setSelectedAgent('');
    setScanData(null);
    setNodes([]);
    setEdges([]);
  };

  const handleAgentChange = (agentId: string) => {
    setSelectedAgent(agentId);
    setScanData(null);
    setNodes([]);
    setEdges([]);
  };

  useEffect(() => {
    const fetchOrganizations = async () => {
      try {
        const organizations = await OrganizationApiService.getAllOrganizations();
        setOrganizations(organizations);
      } catch (err) {
        setError('Failed to fetch organizations');
      }
    };
    fetchOrganizations();
  }, []);

  useEffect(() => {
    const fetchAgents = async () => {
      if (!selectedOrg) {
        setAgents([]);
        setSelectedAgent('');
        return;
      }

      try {
        const selectedOrganization = organizations.find(org => org._id === selectedOrg);
        if (!selectedOrganization) return;

        const agentPromises = selectedOrganization.agentIds.map(agentId =>
          AgentApiService.getAgentDetails(agentId)
        );

        const agentDetails = await Promise.all(agentPromises);
        setAgents(agentDetails);
        setSelectedAgent('');
      } catch (err) {
        setError('Failed to fetch agents');
        setAgents([]);
      }
    };

    fetchAgents();
  }, [selectedOrg, organizations]);

  const processGraphData = (data: ScanData) => {
    const newNodes: Map<string, Node> = new Map();
    const newEdges: Set<Edge> = new Set();

    data.results.get_all_groups.forEach((group) => {
      const groupNodeId = `group-${group.sAMAccountName}`;
      if (!newNodes.has(groupNodeId)) {
        newNodes.set(groupNodeId, {
          id: groupNodeId,
          type: 'default',
          data: {
            label: group.sAMAccountName,
            description: group.description[0] || '',
            type: 'group'
          },
          position: { x: 0, y: 0 },
          className: 'bg-blue-500 rounded-lg p-2 text-white',
          draggable: true
        });
      }

      group.member.forEach((member) => {
        const memberName = member.split(',')[0].replace('CN=', '');
        const memberNodeId = `member-${memberName}`;

        if (!newNodes.has(memberNodeId)) {
          newNodes.set(memberNodeId, {
            id: memberNodeId,
            type: 'default',
            data: {
              label: memberName,
              type: 'member'
            },
            position: { x: 0, y: 0 },
            className: 'bg-green-500 rounded-lg p-2 text-white',
            draggable: true
          });
        }

        newEdges.add({
          id: `${groupNodeId}-${memberNodeId}`,
          source: groupNodeId,
          target: memberNodeId,
          animated: true,
          type: 'smoothstep',
          style: { stroke: '#4299e1' }
        });
      });

      group.memberOf.forEach((parentGroup) => {
        const parentGroupName = parentGroup.split(',')[0].replace('CN=', '');
        const parentNodeId = `group-${parentGroupName}`;

        if (!newNodes.has(parentNodeId)) {
          newNodes.set(parentNodeId, {
            id: parentNodeId,
            type: 'default',
            data: {
              label: parentGroupName,
              type: 'group'
            },
            position: { x: 0, y: 0 },
            className: 'bg-blue-500 rounded-lg p-2 text-white',
            draggable: true
          });
        }

        newEdges.add({
          id: `${parentNodeId}-${groupNodeId}`,
          source: parentNodeId,
          target: groupNodeId,
          animated: true,
          type: 'smoothstep',
          style: { stroke: '#9333ea' }
        });
      });
    });

    const { nodes: layoutedNodes, edges: layoutedEdges } = applyPhysicsLayout(
      Array.from(newNodes.values()),
      Array.from(newEdges)
    );

    setNodes(layoutedNodes);
    setEdges(layoutedEdges);
  };

  const onNodeDragStop = useCallback((event: React.MouseEvent, node: Node) => {
    const updatedNodes = nodes.map((n) => n.id === node.id ? { ...n, position: node.position } : n);
    setNodes(updatedNodes);
  }, [nodes]);

  useEffect(() => {
    const fetchScanData = async () => {
      if (!selectedAgent) {
        setScanData(null);
        setNodes([]);
        setEdges([]);
        return;
      }

      setLoading(true);
      try {
        const response = await ScanApiService.getLatestScanResult(selectedAgent);
        if (response && response.scanResult) {
          const parsedResult = JSON.parse(response.scanResult);
          if (parsedResult.recon) {
            const scan = {
              timestamp: response.scanResult.createdAt,
              queries_executed: parsedResult.recon.queries_executed || 0,
              results: {
                get_all_groups: parsedResult.recon.results.get_all_groups || []
              }
            };
            setScanData(scan);
            processGraphData(scan);
          }
        }
      } catch (err) {
        setError('Failed to fetch scan data');
        setScanData(null);
        setNodes([]);
        setEdges([]);
      } finally {
        setLoading(false);
      }
    };

    fetchScanData();
  }, [selectedAgent]);

  return (
    <div className="space-y-6">
      <Card className="bg-[#111] border-gray-800 shadow-lg">
        <CardHeader className="space-y-4">
          <div className="text-gray-400 text-center text-sm">[ Vulnerability Assessment ]</div>
          <CardTitle className="text-2xl md:text-3xl font-bold text-center text-white">
            AD Groups Analysis
          </CardTitle>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Organization</label>
              <Select value={selectedOrg} onValueChange={handleOrgChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800">
                  <SelectValue placeholder="Select organization" />
                </SelectTrigger>
                <SelectContent>
                  {organizations.map((org) => (
                    <SelectItem key={org._id} value={org._id}>
                      {org.organizationName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Agent</label>
              <Select value={selectedAgent} onValueChange={handleAgentChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800" disabled={!selectedOrg}>
                  <SelectValue placeholder="Select agent" />
                </SelectTrigger>
                <SelectContent>
                  {agents.map((agent) => (
                    <SelectItem key={agent.agent_id} value={agent.agent_id}>
                      {agent.agent_name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {scanData && (
            <p className="text-gray-400 text-center text-sm md:text-base">
              Scan completed on {new Date(scanData.timestamp).toLocaleString()}
            </p>
          )}
        </CardHeader>

        <CardContent>
          {loading ? (
            <div className="text-center text-gray-400">Loading...</div>
          ) : nodes.length > 0 ? (
            <div style={{ height: '600px' }}>
              <ReactFlow
                nodes={nodes}
                edges={edges}
                onNodeDragStop={onNodeDragStop}
                nodesDraggable
                panOnScroll
                zoomOnScroll
                fitView
                attributionPosition="bottom-left"
              >
                <Background />
                <Controls />
              </ReactFlow>
            </div>
          ) : (
            <div className="text-center text-gray-400">
              {selectedAgent ? 'No scan data available' : 'Select an organization and agent to view group relationships'}
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
