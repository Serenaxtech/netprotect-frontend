'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { VulnerabilityData } from '@/types/vulnerability';
import { OrganizationApiService, Organization } from '@/services/api/organizationApi';
import { AgentApiService, AgentDetails } from '@/services/api/agentApi';
import { ScanApiService } from '@/services/api/scanApi';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';


export default function VulnerabilityPage() {
  const [organizations, setOrganizations] = useState<Organization[]>([]);
  const [selectedOrg, setSelectedOrg] = useState('');
  const [agents, setAgents] = useState<AgentDetails[]>([]);
  const [selectedAgent, setSelectedAgent] = useState('');
  const [scanData, setScanData] = useState<VulnerabilityData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch organizations
  useEffect(() => {
    const fetchOrganizations = async () => {
      try {
        const organizations = await OrganizationApiService.getAllOrganizations();
        setOrganizations(organizations);
      } catch (err) {
        setError('Failed to fetch organizations');
      }
    };
    fetchOrganizations();
  }, []);

  // Fetch agents when organization is selected
  useEffect(() => {
    const fetchAgents = async () => {
      if (!selectedOrg) {
        setAgents([]);
        setSelectedAgent('');
        return;
      }

      try {
        // Find the selected organization
        const selectedOrganization = organizations.find(org => org._id === selectedOrg);
        if (!selectedOrganization) return;

        // Get details for each agent in the organization
        const agentPromises = selectedOrganization.agentIds.map(agentId =>
          AgentApiService.getAgentDetails(agentId)
        );

        const agentDetails = await Promise.all(agentPromises);
        setAgents(agentDetails);
        setSelectedAgent('');
      } catch (err) {
        setError('Failed to fetch agents');
        setAgents([]);
      }
    };

    fetchAgents();
  }, [selectedOrg, organizations]);

  // Fetch scan data when agent is selected
  useEffect(() => {
    const fetchScanData = async () => {
      if (!selectedAgent) {
        setScanData(null);
        return;
      }

      try {
        setLoading(true);
        const result = await ScanApiService.getLatestScanResult(selectedAgent);
        if (result?.scanResult) {
          // Parse the scanResult string to get the recon data
          const parsedScanResult = JSON.parse(result.scanResult);
          // Access the ftp data specifically
          const ftpData = parsedScanResult.ftp;
          if (ftpData) {
            setScanData(ftpData);
          } else {
            setScanData(null);
          }
        } else {
          setScanData(null);
        }
      } catch (err) {
        console.error('Error parsing scan data:', err);
        setError('Failed to fetch scan data');
        setScanData(null);
      } finally {
        setLoading(false);
      }
    };

    fetchScanData();
  }, [selectedAgent]);

  const handleOrgChange = (orgId: string) => {
    setSelectedOrg(orgId);
    setSelectedAgent('');
    setScanData(null); 
  };

  const handleAgentChange = (agentId: string) => {
    setSelectedAgent(agentId);
    setScanData(null);
  };

  return (
    <div className="space-y-6">
      <Card className="bg-[#111] border-gray-800 shadow-lg">
        <CardHeader className="space-y-4">
          <div className="text-gray-400 text-center text-sm">[ Vulnerability Assessment ]</div>
          <CardTitle className="text-2xl md:text-3xl font-bold text-center text-white">
            FTP Server Analysis
          </CardTitle>
          
          {/* Organization and Agent Selection */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Organization</label>
              <Select value={selectedOrg} onValueChange={handleOrgChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800">
                  <SelectValue placeholder="Select organization" />
                </SelectTrigger>
                <SelectContent>
                  {organizations.map((org) => (
                    <SelectItem key={org._id} value={org._id}>
                      {org.organizationName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Agent</label>
              <Select value={selectedAgent} onValueChange={handleAgentChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800" disabled={!selectedOrg}>
                  <SelectValue placeholder="Select agent" />
                </SelectTrigger>
                <SelectContent>
                  {agents.map((agent) => (
                    <SelectItem key={agent.agent_id} value={agent.agent_id}>
                      {agent.agent_name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {scanData && (
            <p className="text-gray-400 text-center text-sm md:text-base">
              Scan completed on {new Date(scanData.scan_timestamp).toLocaleString()}
            </p>
          )}
        </CardHeader>

        {loading ? (
          <CardContent>
            <div className="text-center text-gray-400">Loading...</div>
          </CardContent>
        ) : scanData ? (
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.servers_scanned}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Servers Scanned</p>
                </CardContent>
              </Card>
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.ftp_servers_found}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">FTP Servers Found</p>
                </CardContent>
              </Card>
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.vulnerable_servers}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Vulnerable Servers</p>
                </CardContent>
              </Card>
            </div>

            <div className="space-y-6">
              {scanData.results.map((server, index) => (
                <Card key={server.hostname} className="bg-[#1A1A1A] border-gray-800">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex justify-between items-center">
                      <span>{server.hostname}</span>
                      <span className={`text-sm px-3 py-1 rounded ${server.vulnerabilities.length > 0 ? 'bg-red-600' : 'bg-green-600'}`}>
                        {server.vulnerabilities.length > 0 ? 'Vulnerable' : 'Secure'}
                      </span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div className="text-gray-400">Version:</div>
                      <div className="text-white">{server.version}</div>
                      <div className="text-gray-400">Banner:</div>
                      <div className="text-white">{server.banner}</div>
                      <div className="text-gray-400">Anonymous Access:</div>
                      <div className="text-white">{server.anonymous_access ? 'Yes' : 'No'}</div>
                      <div className="text-gray-400">FTP Bounce:</div>
                      <div className="text-white">{server.ftp_bounce ? 'Yes' : 'No'}</div>
                      <div className="text-gray-400">Clear Text Credentials:</div>
                      <div className="text-white">{server.clear_text_credentials ? 'Yes' : 'No'}</div>
                    </div>

                    {server.vulnerabilities.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-red-500 font-medium mb-2">Vulnerabilities Found:</h4>
                        <ul className="list-disc list-inside space-y-1">
                          {server.vulnerabilities.map((vuln, i) => (
                            <li key={i} className="text-gray-300">{vuln}</li>
                          ))}
                        </ul>
                      </div>
                    )}

                    {server.directory_listing.length > 0 && (
                      <div className="mt-4">
                        <h4 className="text-yellow-500 font-medium mb-2">Accessible Directories:</h4>
                        <div className="flex flex-wrap gap-2">
                          {server.directory_listing.map((dir, i) => (
                            <span key={i} className="bg-gray-800 px-2 py-1 rounded text-gray-300">{dir}</span>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>
          </CardContent>
        ) : (
          <CardContent>
            <div className="text-center text-gray-400">
              {selectedAgent ? 'No scan data available' : 'Select an organization and agent to view scan results'}
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}