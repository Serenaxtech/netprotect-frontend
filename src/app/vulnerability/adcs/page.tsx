'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { OrganizationApiService, Organization } from '@/services/api/organizationApi';
import { AgentApiService, AgentDetails } from '@/services/api/agentApi';
import { ScanApiService } from '@/services/api/scanApi';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';

interface ADCSTemplate {
  name: string;
  display_name: string;
  schema_version: string;
  validity_period: string;
  renewal_period: string;
  owner: string;
  enrollee_supplies_subject: boolean;
  client_authentication: boolean;
  enrollment_agent: boolean;
  vulnerable_aces: string[];
  vulnerabilities: string[];
}

interface ADCSCA {
  name: string;
  dns_name: string;
  ca_name: string;
  web_enrollment: boolean;
  vulnerable_to_ntlm_relay: boolean;
}

interface ADCSData {
  scan_timestamp: string;
  domain: string;
  cas: ADCSCA[];
  templates: ADCSTemplate[];
  vulnerabilities: {
    esc1: string[];
    esc2: string[];
    esc3: string[];
    esc4: string[];
    esc5: string[];
    esc6: string[];
    esc7: string[];
    esc8: string[];
    other: string[];
  };
  summary: {
    total_cas: number;
    total_templates: number;
    total_vulnerable_templates: number;
    vulnerability_counts: {
      esc1: number;
      esc2: number;
      esc3: number;
      esc4: number;
      esc5: number;
      esc6: number;
      esc7: number;
      esc8: number;
      other: number;
    };
  };
}

export default function ADCSPage() {
  const [organizations, setOrganizations] = useState<Organization[]>([]);
  const [selectedOrg, setSelectedOrg] = useState('');
  const [agents, setAgents] = useState<AgentDetails[]>([]);
  const [selectedAgent, setSelectedAgent] = useState('');
  const [scanData, setScanData] = useState<ADCSData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Fetch organizations
  useEffect(() => {
    const fetchOrganizations = async () => {
      try {
        const organizations = await OrganizationApiService.getAllOrganizations();
        setOrganizations(organizations);
      } catch (err) {
        setError('Failed to fetch organizations');
      }
    };
    fetchOrganizations();
  }, []);

  // Fetch agents when organization is selected
  useEffect(() => {
    const fetchAgents = async () => {
      if (!selectedOrg) {
        setAgents([]);
        setSelectedAgent('');
        return;
      }

      try {
        const selectedOrganization = organizations.find(org => org._id === selectedOrg);
        if (!selectedOrganization) return;

        const agentPromises = selectedOrganization.agentIds.map(agentId =>
          AgentApiService.getAgentDetails(agentId)
        );

        const agentDetails = await Promise.all(agentPromises);
        setAgents(agentDetails);
        setSelectedAgent('');
      } catch (err) {
        setError('Failed to fetch agents');
        setAgents([]);
      }
    };

    fetchAgents();
  }, [selectedOrg, organizations]);

  // Fetch scan data when agent is selected
  useEffect(() => {
    const fetchScanData = async () => {
      if (!selectedAgent) {
        setScanData(null);
        return;
      }

      try {
        setLoading(true);
        const result = await ScanApiService.getLatestScanResult(selectedAgent);
        if (result?.scanResult) {
          const parsedScanResult = JSON.parse(result.scanResult);
          const adcsData = parsedScanResult.adcs;
          if (adcsData) {
            setScanData(adcsData);
          } else {
            setScanData(null);
          }
        } else {
          setScanData(null);
        }
      } catch (err) {
        console.error('Error parsing scan data:', err);
        setError('Failed to fetch scan data');
        setScanData(null);
      } finally {
        setLoading(false);
      }
    };

    fetchScanData();
  }, [selectedAgent]);

  const handleOrgChange = (orgId: string) => {
    setSelectedOrg(orgId);
    setSelectedAgent('');
    setScanData(null);
  };

  const handleAgentChange = (agentId: string) => {
    setSelectedAgent(agentId);
    setScanData(null);
  };

  return (
    <div className="space-y-6">
      <Card className="bg-[#111] border-gray-800 shadow-lg">
        <CardHeader className="space-y-4">
          <div className="text-gray-400 text-center text-sm">[ Vulnerability Assessment ]</div>
          <CardTitle className="text-2xl md:text-3xl font-bold text-center text-white">
            Active Directory Certificate Services Analysis
          </CardTitle>

          {/* Organization and Agent Selection */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Organization</label>
              <Select value={selectedOrg} onValueChange={handleOrgChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800">
                  <SelectValue placeholder="Select organization" />
                </SelectTrigger>
                <SelectContent>
                  {organizations.map((org) => (
                    <SelectItem key={org._id} value={org._id}>
                      {org.organizationName}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <label className="text-sm font-medium text-gray-200">Agent</label>
              <Select value={selectedAgent} onValueChange={handleAgentChange}>
                <SelectTrigger className="bg-[#1A1A1A] border-gray-800" disabled={!selectedOrg}>
                  <SelectValue placeholder="Select agent" />
                </SelectTrigger>
                <SelectContent>
                  {agents.map((agent) => (
                    <SelectItem key={agent.agent_id} value={agent.agent_id}>
                      {agent.agent_name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          {scanData && (
            <p className="text-gray-400 text-center text-sm md:text-base">
              Scan completed on {new Date(scanData.scan_timestamp).toLocaleString()}
            </p>
          )}
        </CardHeader>

        {loading ? (
          <CardContent>
            <div className="text-center text-gray-400">Loading...</div>
          </CardContent>
        ) : scanData ? (
          <CardContent>
            {/* Summary Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.summary.total_cas}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Certificate Authorities</p>
                </CardContent>
              </Card>
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.summary.total_templates}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Total Templates</p>
                </CardContent>
              </Card>
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">{scanData.summary.total_vulnerable_templates}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Vulnerable Templates</p>
                </CardContent>
              </Card>
              <Card className="bg-[#1A1A1A] border-gray-800">
                <CardHeader>
                  <CardTitle className="text-xl text-white text-center">
                    {Object.values(scanData.summary.vulnerability_counts).reduce((a, b) => a + b, 0)}
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-400 text-center">Total Vulnerabilities</p>
                </CardContent>
              </Card>
            </div>

            {/* Certificate Authorities */}
            <div className="space-y-6">
              <h3 className="text-xl font-semibold text-white mb-4">Certificate Authorities</h3>
              {scanData.cas.map((ca) => (
                <Card key={ca.name} className="bg-[#1A1A1A] border-gray-800">
                  <CardHeader>
                    <CardTitle className="text-xl text-white">{ca.name}</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-gray-400">DNS Name</p>
                        <p className="text-white">{ca.dns_name}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">CA Name</p>
                        <p className="text-white">{ca.ca_name}</p>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <p className="text-gray-400">Web Enrollment</p>
                        <p className={ca.web_enrollment ? 'text-green-500' : 'text-red-500'}>
                          {ca.web_enrollment ? 'Enabled' : 'Disabled'}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-400">NTLM Relay Vulnerability</p>
                        <p className={ca.vulnerable_to_ntlm_relay ? 'text-red-500' : 'text-green-500'}>
                          {ca.vulnerable_to_ntlm_relay ? 'Vulnerable' : 'Not Vulnerable'}
                        </p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* Certificate Templates */}
            <div className="space-y-6 mt-6">
              <h3 className="text-xl font-semibold text-white mb-4">Certificate Templates</h3>
              {scanData.templates.map((template) => (
                <Card key={template.name} className="bg-[#1A1A1A] border-gray-800">
                  <CardHeader>
                    <CardTitle className="text-xl text-white flex justify-between items-center">
                      <span>{template.display_name}</span>
                      <span className="text-sm text-gray-400">{template.name}</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div>
                        <p className="text-gray-400">Schema Version</p>
                        <p className="text-white">{template.schema_version}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Validity Period</p>
                        <p className="text-white">{template.validity_period}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Renewal Period</p>
                        <p className="text-white">{template.renewal_period}</p>
                      </div>
                      <div>
                        <p className="text-gray-400">Owner</p>
                        <p className="text-white">{template.owner}</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-3 gap-4">
                      <div>
                        <p className="text-gray-400">Enrollee Supplies Subject</p>
                        <p className={template.enrollee_supplies_subject ? 'text-yellow-500' : 'text-green-500'}>
                          {template.enrollee_supplies_subject ? 'Yes' : 'No'}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-400">Client Authentication</p>
                        <p className={template.client_authentication ? 'text-yellow-500' : 'text-green-500'}>
                          {template.client_authentication ? 'Yes' : 'No'}
                        </p>
                      </div>
                      <div>
                        <p className="text-gray-400">Enrollment Agent</p>
                        <p className={template.enrollment_agent ? 'text-yellow-500' : 'text-green-500'}>
                          {template.enrollment_agent ? 'Yes' : 'No'}
                        </p>
                      </div>
                    </div>

                    {template.vulnerable_aces.length > 0 && (
                      <div>
                        <p className="text-gray-400 mb-2">Vulnerable ACEs</p>
                        <div className="space-y-1">
                          {template.vulnerable_aces.map((ace, index) => (
                            <p key={index} className="text-red-500">{ace}</p>
                          ))}
                        </div>
                      </div>
                    )}

                    {template.vulnerabilities.length > 0 && (
                      <div>
                        <p className="text-gray-400 mb-2">Vulnerabilities</p>
                        <div className="space-y-1">
                          {template.vulnerabilities.map((vuln, index) => (
                            <p key={index} className="text-red-500">{vuln}</p>
                          ))}
                        </div>
                      </div>
                    )}
                  </CardContent>
                </Card>
              ))}
            </div>

            {/* ESC Vulnerabilities Summary */}
            <div className="space-y-6 mt-6">
              <h3 className="text-xl font-semibold text-white mb-4">ESC Vulnerabilities Summary</h3>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {Object.entries(scanData.summary.vulnerability_counts).map(([key, count]) => (
                  <Card key={key} className="bg-[#1A1A1A] border-gray-800">
                    <CardHeader>
                      <CardTitle className="text-xl text-white text-center">{count}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      <p className="text-gray-400 text-center">{key.toUpperCase()}</p>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </div>
          </CardContent>
        ) : (
          <CardContent>
            <div className="text-center text-gray-400">
              {error || 'Select an organization and agent to view ADCS vulnerability data'}
            </div>
          </CardContent>
        )}
      </Card>
    </div>
  );
}